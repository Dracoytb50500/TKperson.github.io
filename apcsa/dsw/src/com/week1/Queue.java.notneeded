public class Queue<T> {
	private Node<T> head;
	private Node<T> tail;
	private int size;
	
	public Queue() {
		head = null;
		tail = null;
		size = 0;
	}
	
	public void enqueue(T data) {
		Node<T> newNode = new Node<T>(data);
		if (head == null) {
			head = newNode;
			tail = newNode;
		} else {
			tail.setNext(newNode);
			tail = newNode;
		}
		size++;
	}
	
	public T dequeue() {
		if (head == null) {
			return null;
		}
		T data = head.getData();
		head = head.getNext();
		size--;
		return data;
	}
	
	public T peek() {
		if (head == null) {
			return null;
		}
		return head.getData();
	}
	
	public int size() {
		return size;
	}
	
	public boolean isEmpty() {
		return size == 0;
	}
	
	public void print() {
		Node<T> current = head;
		while (current != null) {
			System.out.print(current.getData() + " ");
			current = current.getNext();
		}
		System.out.println();
	}
	public static void main(String[] args) {
		//test for Queue
		Queue<Integer> q = new Queue<Integer>();
		q.enqueue(1);
		q.enqueue(2);
		q.enqueue(3);
		q.enqueue(4);
		q.enqueue(5);
		q.print();
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());

		q.print();
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		q.print();

		System.out.println(q.size());
		System.out.println(q.isEmpty());

		q.enqueue(1);
		q.enqueue(2);
		q.enqueue(3);
		q.enqueue(4);
		q.enqueue(5);
		q.print();

		System.out.println(q.peek());
		System.out.println(q.size());
		System.out.println(q.isEmpty());

		q.print();

		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		System.out.println(q.dequeue());
		q.print();

		System.out.println(q.size());
		System.out.println(q.isEmpty());
	}
}

class Node<T> {
    T data;
    Node<T> next;
    Node<T> prev;

    public Node(T data) {
        this.data = data;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }

    public Node<T> getNext() {
        return next;
    }

    public void setNext(Node<T> next) {
        this.next = next;
    }

    public Node<T> getPrev() {
        return prev;
    }

    public void setPrev(Node<T> prev) {
        this.prev = prev;
    }

    @Override
    public String toString() {
        return data.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof Node) {
            Node<T> node = (Node<T>) obj;
            return this.data.equals(node.getData());
        }
        return false;
    }

    @Override
    public int hashCode() {
        return data.hashCode();
    }

    public void print() {
        System.out.println(this.toString());
    }

    public void printAll() {
        Node<T> node = this;
        while (node != null) {
            node.print();
            node = node.getNext();
        }
    }

}